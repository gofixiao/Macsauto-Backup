using Macsauto.Domain;
using NHibernate;
using NHibernate.Criterion;
using System;
using System.Collections.Generic;

namespace Macsauto.Infrastructure.NHibernate.Common
{
    using Macsauto.Infrastructure.NHibernate.Contract;

    public class Repository<TEntity> : IRepository<TEntity> where TEntity : Entity
    {
        #region Field

        private readonly ISession _session;

        #endregion

        #region Constructor

        public Repository(ISession session)
        {
            _session = session;
        }

        #endregion

        #region Methods (IRepository)

        public void Dispose()
        {
            _session.Dispose();
        }

        public TEntity Get(object id)
        {
            return (TEntity) _session.Get(typeof (TEntity), id);
        }

        public TEntity Load(object id)
        {
            return (TEntity) _session.Load(typeof (TEntity), id);
        }

        public TEntity FindFirst(DetachedCriteria criteria)
        {
            return (TEntity) criteria
                .GetExecutableCriteria(_session)
                .UniqueResult();
        }

        public long Count()
        {
            return Count(DetachedCriteria.For<TEntity>());
        }

        public long Count(DetachedCriteria criteria)
        {
            return Convert.ToInt64(criteria
                .Add(Restrictions.Eq(@"RemovedOn", null))
                .GetExecutableCriteria(_session)
                .SetProjection(Projections.RowCount())
                .UniqueResult()
            );
        }

        public bool Exists(object id)
        {
            return Count(DetachedCriteria.For<TEntity>()
                .Add(Restrictions.Eq(Projections.Id(), id))
                .Add(Restrictions.Eq(@"RemovedOn", null))
                .SetProjection(Projections.RowCount())
            ) > 0;
        }

        public bool Exists(DetachedCriteria criteria)
        {
            return Count(criteria) > 0;
        }

        public IList<TEntity> GetAll()
        {
            return _session.QueryOver<TEntity>().List();
        }

        public IList<TEntity> FindAll(DetachedCriteria criteria, params Order[] orders)
        {
            var executableCriteria = criteria.GetExecutableCriteria(_session);

            Array.ForEach(orders, order => executableCriteria.AddOrder(order));

            return executableCriteria.List<TEntity>();
        }

        public void Delete(TEntity entity)
        {
            _session.Update(entity.Delete());
        }

        public void DeleteAll()
        {
            foreach (var entity in GetAll())
            {
                _session.Update(entity.Delete());
            }
        }

        public void DeleteAll(DetachedCriteria criteria)
        {
            foreach (Entity entity in criteria.GetExecutableCriteria(_session).List())
            {
                _session.Update(entity.Delete());
            }
        }

        public TEntity Save(TEntity entity)
        {
            CheckEntityCode(entity);

            _session.Save(entity);

            return entity;
        }

        public TEntity SaveOrUpdate(TEntity entity)
        {
            if (entity.IsTransient())
            {
                entity.GenerateNewGuidId();
            }

            _session.SaveOrUpdate(entity);

            return entity;
        }

        public void Update(TEntity entity)
        {
            _session.Update(entity);
        }

        private static void CheckEntityCode(TEntity entity)
        {
            var autoGeneratedCodeEntity = entity as IAutoGenerateCode;

            if (entity == null || autoGeneratedCodeEntity == null) return;

            if (string.IsNullOrEmpty(entity.Code))
            {
                EntityCodeFactory.GenerateCode(entity);
            }
        }

        #endregion
    }
}